const express = require('express');
const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

const app = express();
const port = 3000;
let mcProcess = null;
let playitProcess = null;
let playitIP = "Ch∆∞a kh·ªüi ƒë·ªông";
let logs = [];

// ƒê·ªçc l·ªánh t·ª´ file input v√† g·ª≠i v√†o server
function checkServerInput() {
  const filePath = path.join(__dirname, 'server_input.txt');
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8').trim();
    if (content) {
      mcProcess.stdin.write(content + '\n');
      fs.writeFileSync(filePath, ''); // X√≥a sau khi th·ª±c thi
      console.log(`üì• ƒê√£ g·ª≠i l·ªánh v√†o server: ${content}`);
    }
  }
}

// H√†m lo·∫°i b·ªè m√£ m√†u terminal
const stripAnsi = str => str.replace(/\x1B\[[0-?]*[ -/]*[@-~]/g, '');

// H√†m ch·∫°y autosave.bat n·∫øu t·ªìn t·∫°i
function startAutoSaveBat() {
  const vbsPath = path.join(__dirname, 'run_autosave.vbs');
  if (fs.existsSync(vbsPath)) {
    spawn('wscript.exe', [vbsPath], {
      cwd: __dirname,
      detached: true,
      stdio: 'ignore'
    }).unref();
    console.log("‚úÖ ƒê√£ ch·∫°y autosave.bat th√¥ng qua .vbs (·∫©n ho√†n to√†n)");
  } else {
    console.warn("‚ö† Kh√¥ng t√¨m th·∫•y file run_autosave.vbs. B·ªè qua!");
  }
}


app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// SSE g·ª≠i log li√™n t·ª•c
app.get('/logs', (req, res) => {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.flushHeaders();

  res.write(`data: ${JSON.stringify(logs)}\n\n`);

  const interval = setInterval(() => {
    res.write(`data: ${JSON.stringify(logs)}\n\n`);
  }, 1000);

  req.on('close', () => clearInterval(interval));
});

// API l·∫•y IP Playit.gg
app.get('/public-ip', (req, res) => {
  res.json({ ip: playitIP });
});

// Start server
app.get('/start-server', (req, res) => {
  if (mcProcess) return res.send('‚ö† Server ƒë√£ ch·∫°y r·ªìi!');

  logs = [];
  playitIP = "ƒêang kh·ªüi t·∫°o...";

  // 1. Ch·∫°y Minecraft server
  mcProcess = spawn('java', [
    '-Xmx1024M',
    '-Xms1024M',
    '-jar',
    'paper-1.21.8-21.jar',
    '--nogui'
  ], { cwd: __dirname });
// 2. Ch·∫°y auto-save.bat ng·∫ßm
    const autosaveProcess = spawn('cmd.exe', ['/c', 'start', '/min', 'autosave.bat'], {
        cwd: __dirname,
        detached: true,
        stdio: 'ignore'
    });
    autosaveProcess.unref();

  mcProcess.stdout.on('data', data => {
    const line = stripAnsi(data.toString().trim());
    console.log(`[MC] ${line}`);
    logs.push(line);
  });

  mcProcess.stderr.on('data', data => {
    const line = stripAnsi(data.toString().trim());
    console.error(`[MC-ERR] ${line}`);
    logs.push(line);
  });

  mcProcess.on('close', code => {
    logs.push(`Minecraft server ƒë√£ t·∫Øt (code ${code})`);
    mcProcess = null;
  });

  // 2. Ch·∫°y Playit.gg
  playitProcess = spawn('./Playit.exe', [], { cwd: __dirname });

  playitProcess.stdout.on('data', data => {
    const text = stripAnsi(data.toString().trim());
    console.log(`[Playit] ${text}`);
    logs.push(`[Playit] ${text}`);

    const domainMatch = text.match(/([a-zA-Z0-9.-]+\.(?:playit\.gg|joinmc\.link))/);
    if (domainMatch && domainMatch[1]) {
      playitIP = domainMatch[1].trim();
      console.log(`üåç Domain: ${playitIP}`);
    }
  });

  playitProcess.stderr.on('data', data => {
    const line = stripAnsi(data.toString().trim());
    console.error(`[Playit-ERR] ${line}`);
    logs.push(`[Playit-ERR] ${line}`);
  });

  playitProcess.on('close', code => {
    logs.push(`Playit.gg ƒë√£ t·∫Øt (code ${code})`);
    playitProcess = null;
  });

  // 3. Kh·ªüi ch·∫°y autosave.bat
  startAutoSaveBat();

  res.send('‚úÖ Server ƒëang kh·ªüi ƒë·ªông...');
});

// Stop server
app.get('/stop-server', (req, res) => {
  if (!mcProcess) return res.send('‚ö† Server ch∆∞a ch·∫°y!');
  mcProcess.stdin.write('stop\n');
  if (playitProcess) playitProcess.kill();
  res.send('üõë ƒêang t·∫Øt server...');
});

// G·ª≠i l·ªánh t·ª´ web v√†o Minecraft
app.post('/command', (req, res) => {
  if (!mcProcess) return res.send('‚ö† Server ch∆∞a ch·∫°y!');
  const { cmd } = req.body;
  if (cmd && cmd.trim() !== '') {
    mcProcess.stdin.write(cmd.trim() + '\n');
    logs.push(`> ${cmd.trim()}`);
    return res.send(`‚úÖ ƒê√£ g·ª≠i l·ªánh: ${cmd.trim()}`);
  }
  res.send('‚ö† L·ªánh r·ªóng!');
});

// G·ªçi checkServerInput() li√™n t·ª•c m·ªói gi√¢y
setInterval(() => {
  if (mcProcess) checkServerInput();
}, 1000);

app.listen(port, () => {
  console.log(`Web ƒëi·ªÅu khi·ªÉn ch·∫°y t·∫°i: http://localhost:${port}`);
});
